module.exports = {
  rules: {
    "array-callback-return": "error",
    "arrow-body-style": "error",
    "arrow-parens": ["error", "as-needed"],
    "arrow-spacing": "error",
    "block-spacing": "error",
    "block-scoped-var": "error",
    "brace-style": "error",
    "camelcase": "error",
    "class-methods-use-this": "off",
    "comma-dangle": ["error", "always-multiline"],
    "comma-spacing": "error",
    "comma-style": "error",
    "constructor-super": "error",
    "curly": "error",
    "default-param-last": "error",
    "dot-location": ["error", "property"],
    "dot-notation": "error",
    "eqeqeq": "error",
    "eol-last": "error",
    "func-call-spacing": "error",
    "id-length": "error",
    "implicit-arrow-linebreak": "off",
    "indent": ["error", 2],
    "keyword-spacing": "error",
    "new-cap": "error",
    "new-parens": "error",
    "no-array-constructor": "error",
    "no-cond-assign": "error",
    "no-confusing-arrow": "off",
    "no-dupe-class-members": "error",
    "no-duplicate-imports": "error",
    "no-eval": "error",
    "no-ex-assign": "error",
    "no-extend-native": "error",
    "no-iterator": "error",
    "no-loop-func": "error",
    "no-multi-assign": "error",
    "no-multi-spaces": "error",
    "no-multiple-empty-lines": "error",
    "no-new-func": "error",
    "no-new-object": "error",
    "no-param-reassign": "error",
    "no-plusplus": "error",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "ForOfStatement",
        "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "no-undef": "error",
    "no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    "no-useless-constructor": "error",
    "no-useless-escape": "error",
    "no-var": "error",
    "object-curly-newline": "error",
    "object-curly-spacing": ["error", "always"],
    "object-shorthand": "error",
    "prefer-arrow-callback": "error",
    "prefer-const": "error",
    "prefer-destructuring": "error",
    "prefer-object-spread": "error",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "prefer-template": "error",
    "quote-props": ["error", "as-needed"],
    "quotes": ["error", "single", "avoid-escape"],
    "semi": "error",
    "space-before-function-paren": ["error", "never"],
    "space-infix-ops": "error",
    "space-in-parens": "error",
    "template-curly-spacing": ["error", "never"],
  }
}
